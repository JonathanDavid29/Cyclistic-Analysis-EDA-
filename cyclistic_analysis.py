# -*- coding: utf-8 -*-
"""Cyclistic_analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZRczvSezmINC5sd5W3Fgo9b0asFBjp1H

**Analysis performed by Jonathan.**

16/10/2023

#Executive Summary

*   **Gender**
  *   Percentage of users divides by their gender:
     - Male 78.8% ğŸ”°
     - Female 21.2% â›”
  *   Number of user types divided by gender:
     * Subscriber:
     Female - 75,625k, Male - 281.483k ğŸ”°
     * Customer:
     Male - 98
     * Dependent:
     Male - 4 â›”
*   **Month**
  * Monthly Trips recorded:
     * January - 74061 â›”
     * February - 142508 ğŸ”°
     * March - 140641
  * Distribution of Trips in February month: day 17-22, records more trips in that time period
*   **Days**
  * Top 3 days with most trips:
     * Tuesday - 61442 ğŸ”°
     * Wednesday - 59998
     * Friday - 60838
  * Top 3 days with less trips:
     * Thursday - 53200
     * Saturday - 32782 â›”
     * Sunday - 31090
*   **Hours**
  * Hours with the highest number of trips:
     * 8 A.M. - 38008 trips
     * 4 P.M. - 36399 trips
     * 5 P.M. - 46959 trips ğŸ”°
*   **Minutes**
  * Customer count by category according to service usage in minutes:
     * Subscriber... [0-300 minutes] - 356.955k trips ğŸ”°, [1201-1500 minutes] - 18 trips
     * Customer... [0-125 minutes] - 97 ğŸ”°, [401-550 minutes] - 1
*   **Stations**
  * Top 3 stations:
   * Clinton St & Washington Blvd - 7437 trips ğŸ”°
   * Clinton St & Madison St - 6079 trips
   * Canal St & Adams St - 5770 trips
________________________________________________________________________________

**Objective & Scope**
* Collect, clean & analyze Cyclistic dataset
* Identify variable of interest
* Allow businesses to make data-driven decisions based on the given dataset
* Share findings

**Methodology**
* Collect data using "Divvy_Trips_2017_Q1"
* Wrangle data using preprocessing, cleaning, transforming and organizing data for further analysis
* Explore data using available techniques

#1.0 Introduction

In 2016, **Cyclistic** launched a successful bike share offering. Since then, the program has grown to a fleet of 5,824 geotagged and locked bikes at a network of 692 stations **across Chicago**. Bikes can be unlocked at one station and returned to any other station in the system at any time.

Until now, Cyclistic's marketing strategy relied on general brand recognition and appealing to broad consumer segments. One of the approaches that helped make this possible **was the flexibility of its pricing plans**: single-ride passes, full-day passes, and annual passes. Customers who purchase single passes or day passes are referred to as occasional users. Customers who purchase annual passes are referred to as riders.

**Leading questions are:**


1.   What is the difference between annual members and occasional cyclists in the use of Cyclistic bicycles?
2.   Can we identify variables of interest to determine whether a conventional user is more likely to purchase a subscription?
"""

import IPython.display as dsp
dsp.Image(url='https://brlsports.com/cdn/shop/articles/237422980_1200x.jpg?v=1666619288',height=300,width=500)

"""#2.0 Retrieving data

## 2.1 Load libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd #package for high-performance, easy-to-use data structures and data analysis
import numpy as np #fundamental package for scientific computing with Python

#libraries for plotting
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import kaleido
# %matplotlib inline

# Supress unnecessary warnings so our presentation will look clean
import warnings
warnings.filterwarnings("ignore")

"""##2.2 Read data"""

df = pd.read_csv('Divvy_Trips_2017_Q1.csv', encoding= 'ISO-8859-1')

"""#3.0 Data Overview

##3.1 Overview Table
"""

df.head()

"""## 3.2 Statistical Overview of the table"""

df.info()

df.describe()

"""*   Trip duration mean 12 minutes
                  min 1 minutes
                  max 24 hrs
*   Users usually use the 'Ritchie Ct & Banks St' station and end their trip at the 'MLK Jr Dr & Oakwood Blvd' station.
*   Age users mean 44 years
              min 124 years
              75% 35 years
              max 7 years


"""

df.shape

"""#4.0 Data preparation

##4.1 looking for missing data.
"""

df.isnull().sum()
df.dropna(inplace=True)

"""##**4.2 looking for duplicated data**"""

df[df.duplicated()]

df['tripduration'] = (1 * df['tripduration'])/60
df['tripduration'] = df['tripduration'].astype(int)

from datetime import datetime

current_year = datetime.now().year
df['birthyear'] = current_year - df['birthyear']
df['birthyear'] = df['birthyear'].astype(int)
df.rename(columns={'birthyear':'user_age','tripduration':'tripduration_minutes'}, inplace=True)

df.tail(2)

df['start_time'] = pd.to_datetime(df['start_time'])
df['end_time'] = pd.to_datetime(df['end_time'])

df['day'] = df['start_time'].dt.day_name()
df['month'] = df['start_time'].dt.month_name()
df.drop(columns='tr_started_hr',inplace = True) #There a column about of time at which a trip starts, but it has wrong values.
df['tvl_started_hr'] = df['start_time'].dt.hour

df.head(2)

df['gender'].unique()

df['gender'].value_counts()

"""#5.0 Data Exploration

##5.1 Percentage of users divides by gender
"""

gender_df = df.groupby(['gender']).agg({'gender':'count'}).rename(columns={'gender':'gender_count'}).reset_index()

fig, ax = plt.subplots()

plt.pie(gender_df['gender_count'], labels = gender_df['gender'], autopct='%1.1f%%',colors=['#E09B93','#154D7C'],shadow=True,startangle=90)
plt.title("Users Gender")

"""###5.1.2 Count of users according to gender and whether they have any type of subscription."""

user_typedf = df.groupby(['gender','usertype']).agg({'gender':'count'}).rename(columns={'gender':'count_by_gender'}).reset_index()
user_typedf.sort_values(by ='count_by_gender', ascending = False)
user_typedf.head()

fig = px.bar(user_typedf, y=user_typedf['usertype'], x=user_typedf['count_by_gender'], title='Usertype Divided by Gender',color="gender")
fig.update_layout(width = 600, height = 400)
fig.update_xaxes(title_text="Gender Count")
fig.update_yaxes(title_text="User Type")
fig.show()

"""###5.1.3 Average user age"""

fig = sns.boxplot(df,x='user_age', y = 'gender')
plt.title('Average User Age')

"""##5.2 Monthly Trips Recorded"""

fig = px.bar(df,x=df['month'].value_counts().keys(),y=df['month'].value_counts(), text = df['month'].value_counts(),title='Monthly Trips Recorded',color_discrete_sequence=["darkcyan"])
fig.update_layout(width = 600, height = 400)
fig.update_xaxes(title_text="Months")
fig.update_yaxes(title_text="Count")
fig.show()

month_feb = df[df['month'] == 'February']
month_feb.head(2)

"""### 5.2.2 Distribution of Trips by Days in February Month"""

month_feb['day_number'] = month_feb['start_time'].dt.day
trips_by_days= month_feb['day_number'].value_counts().reset_index()
trips_by_days.columns=['Days','Number of Trips']
trips_by_days=trips_by_days.sort_values(by='Days')

fig = px.histogram(trips_by_days,x=trips_by_days['Days'],y=trips_by_days['Number of Trips'], title='Distribution of Trips by Days in February Month', nbins = 31, color_discrete_sequence=["darkcyan"])
fig.update_layout(width = 700, height = 500)
fig.update_xaxes(title_text="Days")
fig.update_yaxes(title_text="Trips number")
fig.show()

"""###5.2.3 Trips per day grouped by month"""

MD_trips_df = df.groupby(['month','day']).agg({'day':'count'}).rename(columns={'day':'count_by_day'}).reset_index()
MD_trips_df.sort_values(by =['count_by_day','day'], ascending = False)
MD_trips_df.head(2)

fig = px.bar(MD_trips_df, y=MD_trips_df['month'], x=MD_trips_df['count_by_day'], title='Trips Per Day Grouped by Month',color="day")
fig.update_layout(width = 600, height = 400)
fig.update_xaxes(title_text="Days Count")
fig.update_yaxes(title_text="Months")
fig.show()

"""##5.3 Daily Trips Recorded"""

fig = px.bar(df,x=df['day'].value_counts().keys(),y=df['day'].value_counts(), text= df['day'].value_counts(),title='Daily Trips Recorded',color_discrete_sequence=["darkcyan"])
fig.update_layout(width = 600, height = 400)
fig.update_xaxes(title_text="Days")
fig.update_yaxes(title_text="Count")
fig.show()

"""##5.4 Trips Through the Hours"""

hour = df['tvl_started_hr'].value_counts().reset_index()
hour.columns = ['Hour', 'Count']
hour= hour.sort_values(by='Hour')

fig = px.bar(hour,x=hour['Hour'],y=hour['Count'],text = 'Count',title='Trips Through the Hours',color_discrete_sequence=["darkcyan"])
fig.update_layout(width = 700, height = 500)
fig.update_xaxes(title_text="Hours")
fig.update_yaxes(title_text="Number of trips")
fig.show()

"""Categorizar a Usuarios subscriptores y normales por separado en base a sus viajes en minutos (tripduration_minutes). para saber cual es la diferencia entre un subscriptor y un usuario normal en cuestion del uso. ej 0-150,151 - 300 ->> como string

### 5.4.2 Difference in usage in minutes between Customer and Subscriber
"""

tp_minutes_subs_df = pd.DataFrame()
tp_minutes_subs_df['Subscriber'] = df['usertype']
tp_minutes_subs_df = tp_minutes_subs_df[tp_minutes_subs_df['Subscriber'] == 'Subscriber']
tp_minutes_subs_df['tripduration_minutes'] = df['tripduration_minutes']
#-----------------------------------------------------------------------------------------
tp_minutes_Cust_df = pd.DataFrame()
tp_minutes_Cust_df['Customer'] = df['usertype']
tp_minutes_Cust_df = tp_minutes_Cust_df[tp_minutes_Cust_df['Customer'] == 'Customer']
tp_minutes_Cust_df['tripduration_minutes'] = df['tripduration_minutes']

bins = [0, 300, 600, 900, 1200, 1500]
labels = ['0-300', '301-600', '601-900','901-1200','1201-1500']
tp_minutes_subs_df['Categoria'] = pd.cut(tp_minutes_subs_df['tripduration_minutes'], bins=bins, labels=labels)
tp_minutes_subs_df['Categoria'] = tp_minutes_subs_df['Categoria'].astype(str)
#--------------------------------------------------------------------------------------------------------------
bins2 = [0, 125, 250, 400, 550]
labels2 = ['0-125', '126-250', '251-400','401-550']
tp_minutes_Cust_df['Categoria'] = pd.cut(tp_minutes_Cust_df['tripduration_minutes'], bins=bins2, labels=labels2)
tp_minutes_Cust_df['Categoria'] = tp_minutes_Cust_df['Categoria'].astype(str)

test_df = tp_minutes_subs_df.groupby(['Categoria']).agg({'Subscriber':'count'}).rename(columns={'Subscriber':'count_sub_'}).reset_index()
test_df.sort_values(by =['count_sub_'], ascending = False)
#----------------------------------------------------------------------------------------------------------------------------------------
test_df1 = tp_minutes_Cust_df.groupby(['Categoria']).agg({'Customer':'count'}).rename(columns={'Customer':'count_cust_'}).reset_index()
test_df1.sort_values(by =['count_cust_'], ascending = False)

from plotly.subplots import make_subplots

fig1 = px.bar(test_df, x=test_df['Categoria'], y=test_df['count_sub_'])
#-------------------------------------------------------------------------------------------------------------
fig2 = px.bar(test_df1, x=test_df1['Categoria'], y=test_df1['count_cust_'])

fig = make_subplots(rows=1, cols=2,subplot_titles=("Subscriber", "Customer"))
fig.add_trace(fig1.data[0], row=1, col=1)
fig.add_trace(fig2.data[0], row=1, col=2)
fig.update_layout(width = 700, height = 500, title_text="Customer count by category according to service usage in minutes",title_x = 0.5)
fig.update_xaxes(title_text="Minutes", row=1, col=1)
fig.update_xaxes(title_text="Minutes", row=1, col=2)
fig.update_yaxes(title_text="Count", row=1, col=1)
fig.show()

"""##5.5 Top 10 Stations Where People Start Their Travels"""

top_stations_count = df['from_station_name'].value_counts().head(10)
print(top_stations_count)

fig = px.bar(df,x=df['from_station_name'].value_counts().head(10).keys(),y=df['from_station_name'].value_counts().head(10), text = df['from_station_name'].value_counts().head(10), color_discrete_sequence=["orange", "red"],title='Top 10 Stations Where People Start Their Travels')
fig.update_xaxes(title_text="Stations")
fig.update_yaxes(title_text="Count")
fig.update_layout(width = 600, height = 400)
fig.show()

"""###5.5.2 Top 10 Stations Where People Ends Their Travels"""

top_end_stations_count = df['to_station_name'].value_counts().head(10)
print(top_end_stations_count)

fig = px.bar(df,x=df['to_station_name'].value_counts().head(10).keys(),y=df['to_station_name'].value_counts().head(10), text=df['to_station_name'].value_counts().head(10), color_discrete_sequence=["darkcyan"],title='Top 10 Stations Where People Ends Their Travels')
fig.update_xaxes(title_text="Stations")
fig.update_yaxes(title_text="Count")
fig.update_layout(width = 600, height = 400)
fig.show()